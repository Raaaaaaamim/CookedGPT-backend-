import { GoogleGenAI } from "@google/genai";
import { StatusCodes } from "../enums/ErrorEnums";
import {
  DEFAULT_TRANSFORMER_OUTPUT,
  DEFAULT_TRANSFORMER_PROPS,
} from "../src/interfaces/transformation";
import { CustomError } from "../src/utils/CustomError";
import getModelById from "../src/utils/getModelById";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  throw new CustomError(
    "GEMINI_API_KEY is not set in environment variables.",
    StatusCodes.SERVER_ERROR
  );
}

const useGemini = async ({
  modelId,
  prompt,
  key,
}: DEFAULT_TRANSFORMER_PROPS): Promise<DEFAULT_TRANSFORMER_OUTPUT> => {
  try {
    const ai = new GoogleGenAI({ apiKey: key || GEMINI_API_KEY });

    const model = await getModelById(modelId, "GEMINI");
    const response = await ai.models.generateContent({
      model: model.name,
      contents: prompt,
    });

    // Check if response contains text
    if (!response.text) {
      throw new Error("No text generated by the model.");
    }

    return {
      content: response.text.trim(),
      modelName: model.name,
      type: model.type,
    };
  } catch (error: any) {
    console.error("Error generating content with Gemini:", error);
    throw new CustomError(
      `Failed to generate content: ${error.message}`,
      StatusCodes.BAD_REQUEST
    );
  }
};

export default useGemini;
