// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username        String            @unique
  email           String            @unique
  fullName        String
  clerkId         String            @unique
  avatar          String?
  transformations Transformations[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  apiKeys         Keys[]
  Tags            Tags[]
  role            ROLE              @default(USER)
}

model Tags {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  prompt    String
  authorId  String   @unique @db.Uuid
  author    Users    @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Keys {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apiKey    String
  authorId  String   @unique @db.Uuid
  author    Users    @relation(fields: [authorId], references: [id])
  model     Models   @relation(fields: [modelId], references: [id])
  type      TYPE
  modelId   String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transformations {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId  String   @db.Uuid
  author    Users    @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      String[]
}

model Models {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  performance PERFORMANCE
  type        TYPE
  Keys        Keys?
}

enum PERFORMANCE {
  AVERAGE
  GOOD
  EXCELLENT
}

enum TYPE {
  OPENAI
  OPENROUTER
  GEMINI
}

enum ROLE {
  USER
  ADMIN
}
